// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

import 'package:ffi/ffi.dart';

/// A Flutter wrapper for MuPDF
class libMuPdf {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  libMuPdf(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  libMuPdf.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<MuPdfInst> NewMuPdfInst() {
    return _NewMuPdfInst();
  }

  late final _NewMuPdfInstPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MuPdfInst> Function()>>(
          'NewMuPdfInst');
  late final _NewMuPdfInst =
      _NewMuPdfInstPtr.asFunction<ffi.Pointer<MuPdfInst> Function()>();

  int LoadDocument(
    ffi.Pointer<MuPdfInst> inst,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _LoadDocument(
      inst,
      path,
    );
  }

  late final _LoadDocumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MuPdfInst>, ffi.Pointer<ffi.Int8>)>>('LoadDocument');
  late final _LoadDocument = _LoadDocumentPtr.asFunction<
      int Function(ffi.Pointer<MuPdfInst>, ffi.Pointer<ffi.Int8>)>();

  int GetPageCount(
    ffi.Pointer<MuPdfInst> inst,
    ffi.Pointer<ffi.Int32> page_count,
  ) {
    return _GetPageCount(
      inst,
      page_count,
    );
  }

  late final _GetPageCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MuPdfInst>, ffi.Pointer<ffi.Int32>)>>('GetPageCount');
  late final _GetPageCount = _GetPageCountPtr.asFunction<
      int Function(ffi.Pointer<MuPdfInst>, ffi.Pointer<ffi.Int32>)>();

  int GetPageText(
    ffi.Pointer<MuPdfInst> inst,
    int page_number,
    ffi.Pointer<ffi.Pointer<Utf8>> result,
    ffi.Pointer<ffi.Int32> len,
  ) {
    return _GetPageText(
      inst,
      page_number,
      result,
      len,
    );
  }

  late final _GetPageTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MuPdfInst>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<Utf8>>,
              ffi.Pointer<ffi.Int32>)>>('GetPageText');
  late final _GetPageText = _GetPageTextPtr.asFunction<
      int Function(ffi.Pointer<MuPdfInst>, int, ffi.Pointer<ffi.Pointer<Utf8>>,
          ffi.Pointer<ffi.Int32>)>();

  int GetPagePixmap(
    ffi.Pointer<MuPdfInst> inst,
    int page_number,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> result,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
    ffi.Pointer<ffi.Int32> channel,
  ) {
    return _GetPagePixmap(
      inst,
      page_number,
      result,
      w,
      h,
      channel,
    );
  }

  late final _GetPagePixmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MuPdfInst>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('GetPagePixmap');
  late final _GetPagePixmap = _GetPagePixmapPtr.asFunction<
      int Function(
          ffi.Pointer<MuPdfInst>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  void ClearMuPDF(
    ffi.Pointer<MuPdfInst> inst,
  ) {
    return _ClearMuPDF(
      inst,
    );
  }

  late final _ClearMuPDFPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MuPdfInst>)>>(
          'ClearMuPDF');
  late final _ClearMuPDF =
      _ClearMuPDFPtr.asFunction<void Function(ffi.Pointer<MuPdfInst>)>();

  void hello_word(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> i,
  ) {
    return _hello_word(
      i,
    );
  }

  late final _hello_wordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('hello_word');
  late final _hello_word = _hello_wordPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();
}

class MuPdfInst extends ffi.Opaque {}
