// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

import 'package:ffi/ffi.dart';

/// A Flutter wrapper for MuPDF
class MuPdfWrapper {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MuPdfWrapper(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MuPdfWrapper.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<MuPdfInst> newMuPdfInst() {
    return _newMuPdfInst();
  }

  late final _newMuPdfInstPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MuPdfInst> Function()>>(
          'newMuPdfInst');
  late final _newMuPdfInst =
      _newMuPdfInstPtr.asFunction<ffi.Pointer<MuPdfInst> Function()>();

  int loadDocument(
    ffi.Pointer<MuPdfInst> inst,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _loadDocument(
      inst,
      path,
    );
  }

  late final _loadDocumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MuPdfInst>, ffi.Pointer<ffi.Int8>)>>('loadDocument');
  late final _loadDocument = _loadDocumentPtr.asFunction<
      int Function(ffi.Pointer<MuPdfInst>, ffi.Pointer<ffi.Int8>)>();

  int getPageCount(
    ffi.Pointer<MuPdfInst> inst,
    ffi.Pointer<ffi.Int32> page_count,
  ) {
    return _getPageCount(
      inst,
      page_count,
    );
  }

  late final _getPageCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MuPdfInst>, ffi.Pointer<ffi.Int32>)>>('getPageCount');
  late final _getPageCount = _getPageCountPtr.asFunction<
      int Function(ffi.Pointer<MuPdfInst>, ffi.Pointer<ffi.Int32>)>();

  int getPageText(
    ffi.Pointer<MuPdfInst> inst,
    int page_number,
    ffi.Pointer<ffi.Pointer<Utf8>> result,
    ffi.Pointer<ffi.Int32> len,
  ) {
    return _getPageText(
      inst,
      page_number,
      result,
      len,
    );
  }

  late final _getPageTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MuPdfInst>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<Utf8>>,
              ffi.Pointer<ffi.Int32>)>>('getPageText');
  late final _getPageText = _getPageTextPtr.asFunction<
      int Function(ffi.Pointer<MuPdfInst>, int, ffi.Pointer<ffi.Pointer<Utf8>>,
          ffi.Pointer<ffi.Int32>)>();

  int getPagePixmap(
    ffi.Pointer<MuPdfInst> inst,
    int page_number,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> result,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Int32> h,
    ffi.Pointer<ffi.Int32> channel,
  ) {
    return _getPagePixmap(
      inst,
      page_number,
      result,
      w,
      h,
      channel,
    );
  }

  late final _getPagePixmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MuPdfInst>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('getPagePixmap');
  late final _getPagePixmap = _getPagePixmapPtr.asFunction<
      int Function(
          ffi.Pointer<MuPdfInst>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  void clearMuPDF(
    ffi.Pointer<MuPdfInst> inst,
  ) {
    return _clearMuPDF(
      inst,
    );
  }

  late final _clearMuPDFPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MuPdfInst>)>>(
          'clearMuPDF');
  late final _clearMuPDF =
      _clearMuPDFPtr.asFunction<void Function(ffi.Pointer<MuPdfInst>)>();
}

class MuPdfInst extends ffi.Opaque {}
